{"version":3,"sources":["app.js"],"names":[],"mappingsfile":"app.js","sourcesContent":["/**\n * Created by Eivind RÃ¸e <eivindroe@gmail.com> on 06.08.2016.\n */\n(function($) {\n    'use strict';\n    var view, photo, map, wall, sites;\n\n    function getTime() {\n        if(typeof Date.now !== typeof undefined) {\n            return Date.now();\n        } else {\n            // Fallback for IE8\n            return new Date().getTime();\n        }\n    }\n\n    function Sites() {\n        var fncCallbackOnFetchedSites,\n            strSiteApiUrl = \"/tentsites\";\n\n        function hasExtendedCacheLifeTime() {\n            var intLastFetchTime = localStorage.getItem(\"Sites.lastFetchTime\");\n            if(!intLastFetchTime) {\n                return true;\n            } else {\n                // Cache lifetime is one hour\n                return ((getTime() - intLastFetchTime) > 3600000);\n            }\n        }\n\n        function fetchSites() {\n            if(hasExtendedCacheLifeTime()) {\n                localStorage.removeItem(\"Sites.all\");\n            }\n\n            var storedImages = localStorage.getItem(\"Sites.all\");\n\n            if(storedImages) {\n                fncCallbackOnFetchedSites(JSON.parse(localStorage.getItem(\"Sites.all\")));\n            } else {\n                $.ajax({\n                    url: strSiteApiUrl,\n                    success: function(response) {\n                        var tentSites = [];\n                        if(parseInt(response.code) === 200 && typeof response.data !== typeof undefined) {\n                            $.each(response.data, function(key, photo) {\n                                tentSites.push({\n                                    id: photo[\"id\"],\n                                    reported_by: photo[\"reported_by\"],\n                                    lat: photo[\"latitude\"],\n                                    lng: photo[\"longitude\"],\n                                    location_name: photo[\"location_name\"],\n                                    created_time: photo[\"created_time\"],\n                                    likes: photo[\"likes\"],\n                                    img_location: photo[\"img_location\"],\n                                    external_id: photo[\"external_id\"],\n                                    thumbnail: photo[\"thumbnail_location\"],\n                                    caption: photo[\"caption\"],\n                                    created_at: photo[\"created_at\"],\n                                    updated_at: photo[\"updated_at\"]\n                                });\n                            });\n                        }\n\n                        if(!storedImages) {\n                            storedImages = [];\n                        } else {\n                            storedImages = JSON.parse(storedImages);\n                        }\n\n                        storedImages = storedImages.concat(tentSites);\n\n                        localStorage.setItem(\"Sites.lastFetchTime\", getTime());\n                        localStorage.setItem(\"Sites.all\", JSON.stringify(storedImages));\n                        fncCallbackOnFetchedSites(tentSites);\n                    }, error: function(error) {\n                        console.log(error);\n                    }\n                });\n            }\n        }\n\n        return {\n            \"onFetchedSites\" : function(fncCallback) {\n                fncCallbackOnFetchedSites = fncCallback;\n                fetchSites();\n            }\n        }\n    }\n\n    function Map() {\n        var loaded = false,\n            TentMap,\n            locationCircle,\n            $map;\n\n        // Configure layers\n        var WorldImagery = L.tileLayer(\n            'http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {\n                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, '+\n                'GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'\n            }),\n            OpenStreetMap = L.tileLayer(\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n                attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n                subdomains: [\"a\",\"b\",\"c\"]\n            });\n\n        // Configure base maps\n        var baseMaps = {\n            \"World imagery\": WorldImagery,\n            \"Open street map\" : OpenStreetMap\n        };\n\n        function bindMap() {\n            TentMap = L.map(\"map\").setView([63.412222, 10.404722], 4);\n        }\n\n        function addLayerToMap(layer) {\n            layer.addTo(TentMap);\n        }\n\n        function addLayersToMap(layers) {\n            L.control.layers(layers).addTo(TentMap);\n        }\n\n        function placeSites(tentSites) {\n            var photoLayer = L.photo.cluster().on(\"click\", function (evt) {\n                var photo = evt.layer.photo,\n                    template = '<img src=\"{img_location}\" /></a><p>{caption}</p>';\n                if (photo.video &&\n                    (!!document.createElement(\"video\").canPlayType(\"video/mp4; codecs=avc1.42E01E,mp4a.40.2\"))\n                ) {\n                    template = '<video autoplay controls poster=\"{img_location}\">' +\n                        '<source src=\"{video}\" type=\"video/mp4\"/></video>';\n                }\n                evt.layer.bindPopup(L.Util.template(template, photo), {\n                    className: \"leaflet-popup-photo\"\n                }).openPopup();\n            });\n            photoLayer.add(tentSites).addTo(TentMap);\n        }\n\n        function markLocation(latitude, longitude, accuracy) {\n            if(locationCircle) {\n                TentMap.removeLayer(locationCircle);\n            }\n            locationCircle = L.circle([latitude, longitude], accuracy, {\n                color: \"red\",\n                fillColor: \"#f03\",\n                fillOpacity: 0.5\n            }).addTo(TentMap);\n        }\n\n        return {\n            initialize: function() {\n                if(loaded === true) {\n                    TentMap.invalidateSize();\n                    return;\n                }\n                loaded = true;\n                bindMap();\n                addLayerToMap(OpenStreetMap);\n                addLayersToMap(baseMaps);\n\n                $map = $(\"#map\");\n\n                // Add view position button\n                L.easyButton({\n                    position: \"topleft\",\n                    states: [{\n                        icon: \"fa-crosshairs\",\n                        title: \"View my position\",\n                        onClick: function(button, map) {\n                            map.locate();\n                        }\n                    }]\n                }).addTo(TentMap);\n\n                TentMap.on(\"locationfound\", function(event) {\n                    markLocation(event.latlng.lat, event.latlng.lng, event.accuracy);\n                    TentMap.setView(event.latlng, 10);\n                });\n\n                TentMap.on(\"locationerror\", function(event) {\n                    view.displayError(\"Could not detect your location\", event.message);\n                });\n\n                sites.onFetchedSites(function(sites) {\n                    placeSites(sites);\n                });\n            },\n            updateView: function(latitude, longitude) {\n                if(!latitude || !longitude) {\n                    return false;\n                }\n                if(!loaded) {\n                    this.initialize();\n                }\n                TentMap.panTo(\n                    new L.LatLng(latitude, longitude),\n                    {animate: true, duration: 0.2, noMoveStart: true, easyLinearity: 0.25}\n                );\n            },\n            destruct: function() {\n\n            }\n        }\n    }\n\n    function Wall() {\n        var $wall = $(\"#wall\"),\n            $wallImageContainer = $(\"#wall-images\"),\n            $wallFullscreen = $(\"#wall-fullscreen\"),\n            $wallLoadMore = $(\"#wall-load-more\"),\n            $preLoadedContainers = $wallImageContainer.find(\".wall-image-container\"),\n            index = $preLoadedContainers.index(),\n            loaded = false;\n\n        function createImageWall(sites) {\n            $.each(sites, function(key, photo) {\n                var $container = $preLoadedContainers.eq(index);\n                index++;\n                if($container.length === 0) {\n                    $container = $(\"<div>\").addClass(\"wall-image-container\").appendTo($wallImageContainer);\n                }\n\n                $container.attr(\"data-image-id\", photo.id)\n                    .attr(\"data-image-latitude\", photo.lat)\n                    .attr(\"data-image-longitude\", photo.lng)\n                    .attr(\"data-image-location\", photo.img_location);\n\n                $container.append($(\"<img>\").attr(\"src\", photo.img_location));\n                $container.append('<div class=\"wall-image-controllers is-hidden\">' +\n                    '<i class=\"wall-image-view-map fa fa-map-marker\" title=\"View image on map\"></i>' +\n                    '<i class=\"wall-image-enlarge fa fa-arrows-alt fa-3x\" title=\"Enlarge image\"></i>' +\n                    '</div>');\n            });\n\n            $(\".wall-image-view-map\").on(\"click\", function(e) {\n                e.stopPropagation();\n                var $photoContainer = $(this).closest(\".wall-image-container\");\n                if($photoContainer.hasClass(\"reveal\")) {\n                    $photoContainer.foundation(\"close\");\n                }\n                view.changePage(\"map\");\n                map.updateView($photoContainer.data(\"image-latitude\"), $photoContainer.data(\"image-longitude\"));\n            });\n\n            $(\".wall-image-enlarge\").on(\"click\", function(e) {\n                e.stopPropagation();\n                var $photoContainer = $(this).closest(\".wall-image-container\");\n                $wallFullscreen.attr(\"data-image-latitude\", $photoContainer.data(\"image-latitude\")).\n                attr(\"data-image-longitude\", $photoContainer.data(\"image-longitude\"));\n                $wallFullscreen.find(\"img\").attr(\"src\", $photoContainer.data(\"image-location\"));\n                $wallFullscreen.foundation(\"open\");\n            });\n\n            // Support for non-mouse interaction\n            $(document).on(\"click\", \".wall-image-container\", function(e) {\n                e.stopPropagation();\n                $(this).find(\".wall-image-controllers\").toggleClass(\"is-hidden\");\n            });\n            $(document).on(\"mouseover\", \".wall-image-container\", function(e) {\n                e.stopPropagation();\n                $(this).find(\".wall-image-controllers\").removeClass(\"is-hidden\");\n            });\n            $(document).on(\"mouseout\", \".wall-image-container\", function(e) {\n                e.stopPropagation();\n                $(this).find(\".wall-image-controllers\").addClass(\"is-hidden\");\n            });\n        }\n\n        return {\n            initialize: function() {\n                if(loaded === false) {\n                    loaded = true;\n                    sites.onFetchedSites(function(sites) {\n                        createImageWall(sites);\n                        $wallLoadMore.removeClass(\"is-hidden\");\n                    });\n\n                    $wallLoadMore.on(\"click\", function() {\n                        sites.onFetchedSites(function(sites) {\n                            createImageWall(sites);\n                        });\n                        $wall.animate({scrollTop: $wall.prop(\"scrollHeight\") - 80}, 1000);\n                    });\n                }\n            },\n            destruct: function() {\n            }\n        }\n    }\n\n    function Photo() {\n        var $photo, $cancel, $store, $location, location = null, $uploader, $uploaderLabel, $caption,\n            loaded = false, options = {target: \"/tentsites\"};\n\n        function uploadPicture(photo, callback) {\n            $.ajax({\n                url: options.target,\n                method: \"POST\",\n                data: {\n                    photo: photo,\n                    latitude: location.latitude,\n                    longitude: location.longitude,\n                    title: $caption.val()\n                }\n            }).success(function(response) {\n                callback(200, response);\n            }).error(function(response) {\n                callback(400, response);\n            });\n        }\n\n        function storePicture(callback) {\n            if(typeof $uploader.prop(\"files\") !== typeof undefined) {\n                var fileReader = new FileReader();\n                fileReader.addEventListener(\"load\", function(e) {\n                    uploadPicture(fileReader.result, callback);\n                });\n                fileReader.readAsDataURL($uploader.prop(\"files\")[0]);\n            }\n        }\n\n        function togglePhotoControllers() {\n            $(\"#photo-controllers\").toggleClass(\"is-hidden\");\n            $uploaderLabel.toggleClass(\"is-hidden\");\n        }\n\n        function clearPhotoDetails() {\n            $caption.val(\"\");\n            $uploader.val(\"\");\n            $photo.find(\"img\").remove();\n            clearLocation();\n        }\n\n        function clearLocation() {\n            $location.removeData(\"location\");\n            $location.toggleClass(\"success\");\n            location = null;\n        }\n\n        function setLocation(lat, lng, accuracy) {\n            $location.data(\"location\", true).addClass(\"success\").attr(\"title\", \"Location found\");\n            location = {\n                latitude: lat,\n                longitude: lng,\n                accuracy: accuracy\n            };\n        }\n\n        function setupListeners() {\n            $photo = $(\"#photo-frame\");\n            $caption = $(\"#photo-caption\");\n            $location = $(\"#photo-location\");\n            $cancel = $(\"#photo-cancel\");\n            $store = $(\"#photo-store\");\n            $uploader = $(\"#photo-file\");\n            $uploaderLabel = $('label[for=\"photo-file\"]');\n\n            $cancel.on(\"click\", function() {\n                clearPhotoDetails();\n                togglePhotoControllers();\n            });\n\n            $store.on(\"click\", function() {\n                if(!location) {\n                    return false;\n                }\n                storePicture(function(code, text) {\n                    if(code === 200) {\n                        $uploaderLabel\n                            .addClass(\"success\")\n                            .text(\"Photo successfully uploaded. Click to upload a new photo\");\n                        clearPhotoDetails();\n                        togglePhotoControllers();\n                    } else {\n                        // Todo: Add some information to user - try again\n                    }\n                });\n            });\n\n            $uploaderLabel.on(\"click\", function() {\n                $(this).removeClass(\"alert success\").text($(this).data(\"text\"));\n            });\n\n            $uploader.on(\"change\", function() {\n                var file = $(this).prop(\"files\")[0];\n\n                if(typeof file !== typeof undefined) {\n                    EXIF.getData(file, function() {\n                        if(typeof EXIF.getTag(this, 'GPSLatitude') === typeof undefined) {\n                            // Throw error as this image does not have required EXIF data\n                            view.displayError(\n                                \"Photo does not contain location data\",\n                                \"We can not accept photos without location data as they are impossible to place on the \" +\n                                \"map, which indeed is the whole concept of this service. <br /><br />\" +\n                                \"Please try a new photo\"\n                            );\n                            $uploaderLabel.addClass(\"alert\").text(\"Photo does not contain location data, try a new one!\");\n                            return false;\n                        }\n\n                        var exifData = EXIF.getAllTags(this),\n                            lat = exifData.GPSLatitude,\n                            lng = exifData.GPSLongitude;\n\n                        // Convert coordinates to WGS84 decimal\n                        var latRef = exifData.GPSLatitudeRef || \"N\";\n                        var lngRef = exifData.GPSLongitudeRef || \"W\";\n                        lat = (lat[0] + lat[1]/60 + lat[2]/3600) * (latRef == \"N\" ? 1 : -1);\n                        lng = (lng[0] + lng[1]/60 + lng[2]/3600) * (lngRef == \"W\" ? -1 : 1);\n\n                        setLocation(lat, lng);\n                        togglePhotoControllers();\n\n                        var reader = new FileReader(),\n                            $previewImage = $(\"<img>\");\n\n                        reader.onload = function(e) {\n                            $previewImage.attr(\"src\", e.target.result);\n                        };\n                        reader.readAsDataURL(file);\n\n                        $previewImage.appendTo($photo);\n                    });\n                }\n            });\n        }\n\n        return {\n            initialize: function() {\n                if(!loaded) {\n                    loaded = true;\n                    setupListeners();\n                }\n            },\n            destruct: function() {\n            }\n        }\n    }\n\n    function View() {\n        var $currentPage, $currentPageContent, currentPageName, $modal;\n\n        function toggleCurrentPage() {\n            if(typeof $currentPage !== typeof undefined) {\n                $currentPage.toggleClass(\"is-active\");\n                $currentPageContent.toggleClass(\"is-hidden\");\n            }\n        }\n\n        function destructCurrentPage() {\n            toggleCurrentPage();\n            if(typeof currentPageName !== typeof undefined) {\n                if(currentPageName == \"photo\") {\n                    photo.destruct();\n                } else if(currentPageName == \"map\") {\n                    map.destruct();\n                } else if(currentPageName == \"wall\") {\n                    wall.destruct();\n                }\n            }\n        }\n\n        function initializeCurrentPage() {\n            toggleCurrentPage();\n            if(typeof currentPageName !== typeof undefined) {\n                if(currentPageName == \"photo\") {\n                    photo.initialize();\n                } else if(currentPageName == \"map\") {\n                    map.initialize();\n                } else if(currentPageName == \"wall\") {\n                    wall.initialize();\n                }\n            }\n        }\n\n        function setCurrentPage($page, pageName) {\n            if(pageName === currentPageName) {\n                return;\n            }\n            destructCurrentPage();\n            localStorage.setItem(\"App.View.currentPage\", pageName);\n            $currentPage = $page;\n            $currentPageContent = getPageContentObject(pageName);\n            currentPageName = pageName;\n            initializeCurrentPage();\n        }\n\n        function getPageContentObject(page) {\n            return $(\"#content\").find('#' + page);\n        }\n\n        function findPageByName(pageName) {\n            return $(\"#menu\").find('li[data-page=\"'+pageName+'\"]');\n        }\n\n        return {\n            initialize: function() {\n                sites = new Sites();\n                photo = new Photo();\n                map = new Map();\n                wall = new Wall();\n                $modal = $(\"#app-modal\");\n                var $menu = $(\"#menu\");\n                var tmpPageName = localStorage.getItem(\"App.View.currentPage\");\n                if(!tmpPageName) {\n                    tmpPageName =  $menu.data(\"page-default\");\n                }\n                setCurrentPage(findPageByName(tmpPageName), tmpPageName);\n\n                $menu.on(\"click\", \"li\", function() {\n                    var $page = $(this);\n                    setCurrentPage($page, $page.data(\"page\"));\n                });\n            },\n            changePage: function(pageName) {\n                setCurrentPage(findPageByName(pageName), pageName);\n            },\n            displayError: function(title, error) {\n                $modal.find(\"h4\").text(title);\n                $modal.find(\"p\").html(error);\n                $modal.foundation(\"open\");\n            }\n        }\n    }\n\n    view = new View();\n    view.initialize();\n\n    $(document).foundation();\n})(jQuery);"]}